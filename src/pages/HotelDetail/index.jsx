import { Button, Card, DatePicker, Row, Col, Form, Input, Space,Modal } from 'antd';

import { connect } from 'react-redux';
import { Content } from 'antd/lib/layout/layout';
import { useEffect, useState } from 'react';
import { SendOutlined,ExclamationCircleOutlined, HomeOutlined,GlobalOutlined,UsergroupAddOutlined,VideoCameraOutlined ,GiftOutlined  , BankOutlined,TeamOutlined, CarOutlined, ArrowUpOutlined, InsertRowRightOutlined, FieldTimeOutlined, EnvironmentOutlined, FileExcelOutlined, HeartOutlined, HistoryOutlined } from '@ant-design/icons';
import { Rate, Progress, BackTop } from 'antd';
import Header from '../../components/layouts/Header';
import moment from 'moment';
import ItemRoom from './components/itemRoom';
import CommentPage from '../../components/Comment'
import { bookingHotelAction, getListRoomAction } from '../../redux/actions';

import './styles.css';
import { Tabs } from 'antd';

const { TabPane } = Tabs;

function callback(key) {
  console.log(key);
}

const style = {
  height: 40,
  width: 40,
  lineHeight: '40px',
  borderRadius: 4,
  backgroundColor: '#1088e9',
  color: '#fff',
  textAlign: 'center',
  fontSize: 14,
};
function ListRoomPage({
  listRoom,
  getListRoom,
  match,
  bookingHotelRoom,
}) {
  const hotelId = match.params.id;
  const [roomSelected, setRoomSelected] = useState({});
  const userInfo = JSON.parse(localStorage.getItem('userInfo'));
  const [dateSelected, setDateSelected] = useState();
  // const [totalPrice, setTotalPrice] = useState(0);
  const isNew = true;
  const currentDate = new Date();

  const [searchKey, setSearchKey] = useState({ userNum: '', price: '' });

  

  let totalPrice = 0;

  useEffect(() => {
    getListRoom({ id: hotelId });
  }, [])

  useEffect(() => {
    if (listRoom.data.id) {
      setRoomSelected(listRoom.data.rooms[0] || {})
    }
  }, [listRoom.data])
  console.log("üöÄ ~ file: index.jsx ~ line 62 ~ listRoom.data", listRoom.data)

  const filterListRoom = listRoom.data.rooms.filter((item) => 
  {
    return item.price.toString().indexOf(searchKey.price.trim()) !== -1 && item.title.toString().indexOf(searchKey.userNum.trim()) !== -1
  })
 


  function handleDate(value) {
    const [startDate, endDate] = value;
    setDateSelected([moment(startDate).format('YYYY/MM/DD'), moment(endDate).format('YYYY/MM/DD')]);
  }
  function renderNoteListRoom() {
    return (
      <>
        <div className="all">
          <div>
            <Button className="combo">{listRoom.data.area}</Button>
            <Button className="combo2">{listRoom.data.wifi}</Button>
            {/* <WifiOutlined className="wifi" /> */}
            {/* <EnvironmentOutlined className ="bando" /> */}

          </div>
          <p className="HotelDetailName">{listRoom.data.name}</p>
          <Rate disabled value={listRoom.data.rate} />
          <p>{listRoom.data.address}</p>
        </div>

      </>
    )
  }
  // function showConfirmBooking() {
  //   Modal.confirm({
  //     title: 'Th√¥ng tin tour ƒë√£ ƒë·∫∑t:',
  //     icon: <ExclamationCircleOutlined />,
  //     content: "B·∫°n c√≥ mu·ªën ƒë·∫∑t",
  //     okText: 'X√°c nh·∫≠n',
  //     cancelText: 'Hu·ª∑',
  //     onOk() {
  //       bookingHotelRoom({
  //         userId: userInfo.id,
  //         hotelId: parseInt(hotelId),
  //         roomId: id,
  //         startDate: dateSelected[0],
  //         endDate: dateSelected[1]
  //       })
  //       totalPrice = defaultPrice;
  //     },
  //     onCancel() {
  //       console.log('Cancel');
  //     },
  //   });
  // }
  function handleBookingHotel(id) {
    if (!userInfo) {
      alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!');
    } else if (!dateSelected) {
      alert('C·∫ßn ch·ªçn ng√†y ƒë·∫∑t ph√≤ng!');
    } else {
      bookingHotelRoom({
        userId: userInfo.id,
        hotelId: parseInt(hotelId),
        roomId: id,
        startDate: dateSelected[0],
        endDate: dateSelected[1],
        totalPrice: totalPrice
      })
    }
  }
  function renderImg() {

    return (
      <>
        <Col  style={{marginTop: 6}} span={18}>
          <div className="detailCol18">
          <Row >
            <Col span={9}>
              <img className="img1" src={listRoom.data.src[0]} alt="" />
            </Col>
            <Col className="imgCol9detail" span={9} >
              <Row >
                
                <img className="img2" src={listRoom.data.src[1]} alt="" />
              </Row>
              <Row gutter={[8, 8]}>
                <Col span={12}>
                  <img className="img3" src={listRoom.data.src[2]} alt="" />
                </Col>
                <Col span={12}>
                  <img className="img3" src={listRoom.data.src[3]} alt="" />
                </Col>
              </Row>
            </Col>
          </Row>
          <Row>
            <div className="layout">
              {renderNoteListRoom()}
            </div>
            <div className="layout3">
              <h3 className="diemnoibat">ƒêi·ªÉm n·ªïi b·∫≠t v·ªÅ ch·ªó nghƒ©</h3>
              <div className="allthongtin">
                <div className="diemnobatcon1">
                  <HistoryOutlined className="icondiemnoibat" />
                  <div className="Note12">
                    <h4 className="note13">B√†n ti·∫øp t√¢n 24H</h4>
                    <span className="note14">Nh·∫≠n ph√≤ng kh√¥ng ph·ª©c t·∫°p</span>
                  </div>
                </div>
                <div className="centernote">
                  <HeartOutlined className="icondiemnoibat1" />
                  <div className="Note12">
                    <h4 className="note13">C√≥ c√°c d·ªãch v·ª• chi·ªÅu l√≤ng kh√°ch h√†ng</h4>
                    <span className="note14">Massage,x√¥ng h∆°i,bida,h·ªì b∆°i...</span>
                  </div>
                </div>
                <div className="diemnobatcon2">
                  <FileExcelOutlined className="icondiemnoibat2" />
                  <div className="Note12">
                    <h4 className="note13">Kh√¥ng h·ªßy ph√≤ng</h4>
                    <span className="note14">ƒê√£ ƒë·∫∑t ph√≤ng th√¨ kh√¥ng ƒë∆∞·ª£c h·ªßy.ƒê·ª´ng xem ch√∫ng t√¥i l√† tr√≤ ch∆°i</span>
                  </div>
                </div>
              </div>
              <div className="thongtinhuich">
                <ul>
                  <li>

                Cung c·∫•p nhi·ªÅu d·ªãch v·ª• ch·∫•t l∆∞·ª£ng v√† ti·ªán nghi ƒëa d·∫°ng ƒë·ªÉ b·∫°n y√™n t√¢m t·∫≠n h∆∞·ªüng k·ª≥ ngh·ªâ c·ªßa m√¨nh
                  </li>
                </ul>
                </div>
              <div  className="thongtinhuich">
                <ul>
                  <li>
                Ch·ªó ngh·ªâ n√†y ƒë∆∞·ª£c trang b·ªã nhi·ªÅu ti·ªán nghi ƒëa d·∫°ng, h·ª©a h·∫πn s·∫Ω l√†m h√†i l√≤ng ngay c·∫£ nh·ªØng kh√°ch h√†ng kh√≥ t√≠nh nh·∫•t
                  </li>
                  </ul>
                </div>
              <div  className="thongtinhuich"> 
              <ul>
                <li>
                C√°c trang thi·∫øt b·ªã gi·∫£i tr√≠ nh∆∞ ph√≤ng th·ªÉ d·ª•c, ph√≤ng x√¥ng h∆°i kh√¥, h·ªì b∆°i trong nh√†, spa, massage s·∫Ω ƒëem l·∫°i nh·ªØng gi·ªù ph√∫t th∆∞ gi√£n sau m·ªôt ng√†y b·∫≠n r·ªôn
                </li>
                
          </ul>
                </div>
              
            </div>
          </Row>
          </div>
        </Col>
        <Col  span={6}>
          <div className="detail">
            <Row gutter={[12, 12]}>
              <Card title="ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng kh√°ch s·∫°n" style={{ width: 350, marginLeft: 25 }}>
                <div>
                  <div>
                    <label htmlFor="">Tuy·ªát v·ªùi</label>
                    <Progress percent={90} status="active" />
                  </div>
                  <div>
                    <label htmlFor="">T·ªët</label>
                    <Progress percent={80} status="active" />
                  </div>
                  <label htmlFor="">Kh√¥ng ƒë·∫°t y√™u c·∫ßu</label>
                  <Progress percent={10} status="exception" />
                </div>
              </Card>
              <Card title="Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt" style={{ width: 350, marginLeft: 25 }}>
                <Row justify="center">
                  <div>
                    <img className="imgcart" src={listRoom.data.src[0]} alt="" />
                    <div className="cartall">
                      <h3><EnvironmentOutlined />.V·ªã tr√≠ hi·∫øm c√≥</h3>
                      <h3><InsertRowRightOutlined />.ƒê·ªãa b√†n ph·ªï bi·∫øn</h3>
                    </div>
                    <div className="doxe">
                      <h4 className="itemdoxe"> <CarOutlined className="icondoxe" />.ƒê·ªó xe</h4>
                      <span className="free">Mi·ªÖn ph√≠</span>
                    </div>
                    <div>
                      <h4 className="Note">C√°c ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng</h4>
                      <ul className="itemnote">
                        <li className="itemnote1">V·ªãnh H·∫° Long</li>
                        <li className="itemnote1">Phong Nha K·∫ª B√†ng</li>
                        <li className="itemnote1">H·ªôi An</li>
                        <li className="itemnote1">Bi·ªÉn M·ªπ Kh√™ ƒê√† N·∫µng</li>
                        <li className="itemnote1">M≈©i n√© C√† Mau</li>
                        <li className="itemnote1">Ch√πa Linh ·ª®ng</li>
                        
                      </ul>

                    </div>
                  </div>
                </Row>

              </Card>
            </Row>
          </div>
        </Col>

      </>
    )


  }


  function renderListRoom() { 
  if (filterListRoom.load) return <p>loading...</p> 
    return filterListRoom.map((item, index) => {
      let isDisabled = false;
      
      if (dateSelected) {
        console.log("üöÄ ~ file: index.jsx ~ line 223 ~ returnfilterListRoom.map ~ dateSelected", dateSelected)
        listRoom.data.bookingHotels.forEach((bookingItem, bookingIndex) => {
          if (
            (
              (
                moment(dateSelected[0], 'YYYY/MM/DD').unix() - moment(bookingItem.startDate, 'YYYY/MM/DD').unix() >= 0 &&
                moment(bookingItem.endDate, 'YYYY/MM/DD').unix() - moment(dateSelected[1], 'YYYY/MM/DD').unix() >= 0
              ) || (
                moment(dateSelected[1], 'YYYY/MM/DD').unix() - moment(bookingItem.startDate, 'YYYY/MM/DD').unix() > 0 &&
                moment(bookingItem.startDate, 'YYYY/MM/DD').unix() - moment(dateSelected[0], 'YYYY/MM/DD').unix() > 0
              ) || (
                moment(bookingItem.endDate, 'YYYY/MM/DD').unix() - moment(dateSelected[0], 'YYYY/MM/DD').unix() > 0 &&
                moment(dateSelected[1], 'YYYY/MM/DD').unix() - moment(bookingItem.endDate, 'YYYY/MM/DD').unix() > 0
              )
            ) && bookingItem.roomId === item.id
          ) {
            isDisabled = true;
          }
        })
        // const numDate = moment(dateSelected[1]).day() - moment(dateSelected[0]).day();
        const numDate = moment.duration(moment(dateSelected[1], 'YYYY/MM/DD').diff(moment(dateSelected[0], 'YYYY/MM/DD'))).asDays();
        console.log("üöÄ ~ file: index.jsx ~ line 253 ~ returnfilterListRoom.map ~ numDate", numDate)
        totalPrice = numDate * item.price;
        // console.log("üöÄ ~ file: index.jsx ~ line 241 ~ returnfilterListRoom.map ~ item.price", item.price)
        console.log("üöÄ ~ file: index.jsx ~ line 242 ~ returnfilterListRoom.map ~ numDate", numDate)
        // console.log("üöÄ ~ file: index.jsx ~ line 243 ~ returnfilterListRoom.map ~ totalPrice", totalPrice)
      } else {
        totalPrice = item.price;
        // console.log("üöÄ ~ file: index.jsx ~ line 244 ~ returnfilterListRoom.map ~ item.price", item.price)


      }

      // console.log("üöÄ ~ file: index.jsx ~ line 244 ~ returnfilterListRoom.map ~ moment", moment(dateSelected[1]).day())

      return (
        <>
          <Content className="site-layout" style={{ padding: '0 30px', marginTop: 64 }}>
            <Row gutter={[12,12]}>
              <Col span={8} >
                {/* {
                filterListRoom.load ? (<p>Loading...</p>) 
                :(filterListRoom.map((item, index) => {
                  return ( */}
                <Card
                  hoverable
                  size="small"
                  cover={<img className="imghoteldetail" alt="example" src={item.img} />}
                  style={{ width: 360 }}

                >
                  <div className="ALLROOM">

                    <div className="option">
                      <h2> {item.title} </h2>
                      <Rate disabled defaultValue={item.rate} />
                      <h3>{item.name}</h3>
                      <ItemRoom
                       key={index}
                        description={item.description}
                      />
{/* 
                      {item.isNew ?
                  <div className="isnew">{item.combo}</div>
                  : null
                } */}
                    
                      <span className="price">{totalPrice.toLocaleString()} VND</span>
                      {isDisabled && (
                        <Button type="primary" disabled className="book" >H·∫øt Ph√≤ng</Button>
                      )}
                      {!isDisabled && (
                        <Button type="primary" className="book" onClick={() => handleBookingHotel(item.id, item.price)}>ƒê·∫∑t Ph√≤ng</Button>
                      )}


                    </div>

                  </div>

                </Card>
                {/* )
                      console.log("üöÄ ~ file: index.jsx ~ line 307 ~ returnfilterListRoom.map ~ item.numDate", item.numDate)
                      console.log("üöÄ ~ file: index.jsx ~ line 307 ~ returnfilterListRoom.map ~ item.numDate", item.numDate)
                  }))
                }  */}
              </Col>

            </Row>
          </Content>
        </>
      )
    })
    
  }



  return (
    <>
    <div>
    <Header />
      <Row className="timkiem">
        <div className="alltimkiem">
          <Form
            name="basic"
            initialValues={{ remember: true }}
            layout="inline"
            onFinish={(values) => {
              setSearchKey({ userNum: values.userNum, price: values.price });

            }}
          >
            <Col span={10}>
              <Form.Item
                name="userNum"
              >
                <Input
                  labelFontSize={100}
                  fontSize={100} prefix={<SendOutlined />}
                  style={{
                    padding: '10px 50px', height: 50,
                    borderRadius: 4,
                    backgroundColor: "white"
                  }}
                  onChange={(e) => //setSearchKey(e.target.value)
                    setSearchKey({ ...searchKey, userNum: e.target.value })
                  }
                  placeholder="B·∫°n c·∫ßn nh·∫≠p s·ªë ng∆∞·ªùi"
                />
              </Form.Item>
            </Col>
            <Col span={11}>
              <Form.Item
                name="dateBooking"
              >
                <DatePicker.RangePicker   labelFontSize={100}
                  fontSize={100}onChange={(value) => handleDate(value)} style={{ padding: '10px 50px', width: '100%', height: 50, borderRadius: 4, backgroundColor: "white" }} defaultValue={moment(currentDate)} format="DD/MM/YYYY" />
              </Form.Item>
            </Col>
            {/* <Col span={7}>
              <Form.Item
                name="price"
              >
                <Input
                  labelFontSize={100}
                  fontSize={100} prefix={<SendOutlined />}
                  disabled
                  style={{
                    padding: '10px 50px',
                    height: 50, borderRadius: 4,
                    backgroundColor: "white"
                  }}
                  onChange={(e) => //setSearchKey(e.target.value)
                    setSearchKey({ ...searchKey, price: e.target.value })
                  }
                  placeholder="Ch·ªçn gi√° ti·ªÅn"
                />
              </Form.Item>
            </Col> */}
            <Col span={3} >
              <Row style={{ width: "100%" }} justify="end">
                <Button style={{ padding: '10px 40px', height: 50, borderRadius: 4, backgroundColor: "#ffe58f", color: "#003a8c", fontWeight: 600 }} >
                  T√¨m
                      </Button>
              </Row>
            </Col>
          </Form>
        </div>
      </Row>


      <div className="bodyHotelDetail">
       <div className="bodyHotelDetail2">
      <Row span={24} className="detailTrangchu">
        <div className="content-header">
          <ol className="breadcrumb"  >
            <Space><HomeOutlined /></Space>
            <li  >
              <a className="item" disabled href="/du-lich/">
                <i className="fa fa-home"></i><span>Trang ch·ªß</span>
              </a>
            </li>
            <i style={{ margin: "0px 10px" }}>|</i>
            <li  >
              <a className="item" disabled href="/du-lich/tour-da-nang">
                <span>Kh√°ch s·∫°n Vi·ªát Nam</span>
              </a>
            </li>
            <i style={{ margin: "0px 10px" }}>|</i>
            <li className="active hidden-xs">
              <a className="item"  href="/du-lich/tour-da-nang-4n3d-hcm-da-nang-ba-na-hoi-an-hue-quang-binh/1189">
                <span >Th√¥ng tin v·ªÅ kh√°ch s·∫°n</span>
              </a>
            </li>
          </ol>
        </div>
      </Row>
      <Row justify="center">
        {renderImg()}
      </Row>
      <Row justify="center">
        <div className="layout2">
          <div>
            <FieldTimeOutlined className="iconTime" />
          </div>
          <div>
            <h3 className="Abc">Ng√†y qu√Ω kh√°ch ch·ªçn l√† ng√†y ph·ªï bi·∫øn ƒë·ªëi v·ªõi kh√°ch du l·ªãch</h3>
            <span className="bcd">C·ª© 60 ph√∫t l√† c√≥ kh√°ch ƒë·∫∑t ph√≤ng tr√™n ƒë√¢y</span>
          </div>
        </div>
       

        <BackTop className="backtop">
          <div style={style}><ArrowUpOutlined /></div>
        </BackTop>

        {filterListRoom.length !=0 ? renderListRoom():
            <Row justify="center">
              <Col span={24}>
              <div className="khongcokq">Kh√¥ng c√≥ k·∫øt qu·∫£...</div>
              </Col>
            </Row>
            }
            </Row>



      <Row gutter={[8, 8]} justify="center">
      <div className="layout4">
          <div>
            <GlobalOutlined  className="iconTime2" />
          </div>
          <div>
            <h3 className="Abc">ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi l·∫ßn n√†y</h3>
            <span className="bcd">Nhanh tay ch·ªçn cho m√¨nh 1 ph√≤ng y√™u th√≠ch ƒë·ªÉ c√πng nhau du l·ªãch n√†o</span>
          </div>
        </div>
      </Row>


      <h1 className="comment1">B√†i ƒë√°nh gi√° t·ª´ kh√°ch h√†ng </h1>
      <Row className="rowdanhgiaall">
        <Col className="coldanhgia" span={16}>
          <div className="bottomcoment">
        <Tabs  defaultActiveKey="1" onChange={callback}>
          <TabPane  tab="" key="1">
            <div className="alldanhgia">
              <div>
                <div>
                  <h3>ƒêi·ªÉm s·ªë tr√™n Webboking</h3>
                  <Progress percent={90} status="active" />
                </div>
                <div className="danhgiashow">
                  <span className="score">{listRoom.data.rate}.0</span>
                  <span className="score-description">Tr√™n c·∫£ tuy·ªát v·ªùi</span>
                  <h3 className="score-danhgia">D·ª±a tr√™n ƒë√°nh gi√° kh√°ch h√†ng</h3>
                </div>
              </div>
              <div className="danhgiacenter">
                <label htmlFor="">ƒê·ªô s·∫°ch s·∫Ω</label>
                <Progress percent={90} className="progress" status="active" size="small" />
                <label htmlFor="">Th√°i ƒë·ªô ph·ª•c v·ª•</label>
                <Progress percent={95} className="progress" status="active" size="small" />
                <label htmlFor="">ƒê√°nh gi√° ti·ªÅn</label>
                <Progress percent={99} className="progress" status="active" size="small" />
              </div>
              <div className="thongtinluuy">
                <h3>Th√¥ng tin c·∫ßn l∆∞u √Ω</h3>
                <div className="thongtinluuy1">
                  <div className="notethongbao">

                  <h4>S·ªë l∆∞·ª£ng ph√≤ng:</h4>
                  <span className="notethongbaocon">200</span>
                  </div>
                  <div  className="notethongbao">
                  <h4>ƒêi·ªán √°p trong ph√≤ng:</h4>
                  <span className="notethongbaocon">220V</span>
                  </div>
                
                </div>
              </div>
            </div>
          </TabPane>
          <TabPane tab="" key="2">
          <div className="alldanhgia">
              <div>
                <div>
                  <h3>ƒêi·ªÉm s·ªë tr√™n Webboking</h3>
                  <Progress percent={90} status="active" />
                </div>
                <div className="danhgiashow">
                  <span className="score">{listRoom.data.rate}.0</span>
                  <span className="score-description">Tr√™n c·∫£ tuy·ªát v·ªùi</span>
                  <h3 className="score-danhgia">D·ª±a tr√™n ƒë√°nh gi√° kh√°ch h√†ng</h3>
                </div>
              </div>
              <div className="danhgiacenter">
                <label >ƒê·ªô s·∫°ch s·∫Ω</label>
                <Progress percent={90} className="progress" status="active" size="small" />
                <label>Th√°i ƒë·ªô ph·ª•c v·ª•</label>
                <Progress percent={95} className="progress" status="active" size="small" />
                <label >ƒê√°nh gi√° ti·ªÅn</label>
                <Progress percent={99} className="progress" status="active" size="small" />
              </div>
              <div className="thongtinluuy">
                <h3>Th√¥ng tin c·∫ßn l∆∞u √Ω</h3>
                <div className="thongtinluuy1">
                  <div className="notethongbao">

                  <h4>S·ªë l∆∞·ª£ng ph√≤ng:</h4>
                  <span className="notethongbaocon">200</span>
                  </div>
                  <div  className="notethongbao">
                  <h4>ƒêi·ªán √°p trong ph√≤ng:</h4>
                  <span className="notethongbaocon">220V</span>
                  </div>
                  <div className="notethongbao">
                  <h4>Kh√°ch s·∫°n ƒë∆∞·ª£c x·∫•y v√†o nƒÉm:</h4>
                  <span className="notethongbaocon">2019</span>
                  </div>
                </div>
              </div>
            </div>
              </TabPane>
        </Tabs>

        <h1 className="comment">ƒê√°nh gi√° kh√°ch h√†ng </h1>
          <CommentPage hotelId={hotelId} />
          </div>
        </Col>

        <Col className="coldanhgia2" span={8}>
        <Card title="Vourcher + Combo khuy·∫øn m√£i ng√†y h√®" style={{ width: 350, marginLeft: 20 }}>
                <Row justify="center">
                  <div>
                    <img className="imgcart" src={listRoom.data.src[1]} alt="" />
                    <div className="cartall">
                      <h3><UsergroupAddOutlined />.T·ªëi ƒëa 3 ng∆∞·ªùi l·ªõn v√† 2 tr·∫ª em</h3>
                      <h3><BankOutlined />.R·ªông 40m2</h3>
                      <h3 className="Note"><UsergroupAddOutlined />.M·ªôt gi∆∞·ªùng ƒë√¥i</h3>
                  
                      <h3 className="Note"><VideoCameraOutlined/>.View nh√¨n ra bi·ªÉn</h3>
                    </div>
                    {/* <div className="doxe">
                      <h4 className="itemdoxe"> <CarOutlined className="icondoxe" />.ƒê·ªó xe</h4>
                      <span className="free">Mi·ªÖn ph√≠</span>
                    </div> */}
                    <div>

                    </div>
                  </div>
                </Row>

              </Card>
        </Col>
      </Row>
      </div>
     </div>
</div>
    </>
  );
}

const mapStateToProps = (state) => {
  const { listRoom } = state.hotelReducer;
  return {
    listRoom,
  }
};

const mapDispatchToProps = (dispatch) => {
  return {
    getListRoom: (params) => dispatch(getListRoomAction(params)),
    bookingHotelRoom: (params) => dispatch(bookingHotelAction(params)),
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(ListRoomPage);



